// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/account/application/port/in/send_money_use_case.go

// Package mock_account_application_port_in is a generated GoMock package.
package mock_account_application_port_in

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account_application_port_in "github.com/kjarmicki/go-buckpal/pkg/account/application/port/in"
)

// MockSendMoneyUseCase is a mock of SendMoneyUseCase interface.
type MockSendMoneyUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendMoneyUseCaseMockRecorder
}

// MockSendMoneyUseCaseMockRecorder is the mock recorder for MockSendMoneyUseCase.
type MockSendMoneyUseCaseMockRecorder struct {
	mock *MockSendMoneyUseCase
}

// NewMockSendMoneyUseCase creates a new mock instance.
func NewMockSendMoneyUseCase(ctrl *gomock.Controller) *MockSendMoneyUseCase {
	mock := &MockSendMoneyUseCase{ctrl: ctrl}
	mock.recorder = &MockSendMoneyUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendMoneyUseCase) EXPECT() *MockSendMoneyUseCaseMockRecorder {
	return m.recorder
}

// SendMoney mocks base method.
func (m *MockSendMoneyUseCase) SendMoney(ctx context.Context, command *account_application_port_in.SendMoneyCommand) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMoney", ctx, command)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMoney indicates an expected call of SendMoney.
func (mr *MockSendMoneyUseCaseMockRecorder) SendMoney(ctx, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMoney", reflect.TypeOf((*MockSendMoneyUseCase)(nil).SendMoney), ctx, command)
}
