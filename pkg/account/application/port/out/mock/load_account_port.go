// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/account/application/port/out/load_account_port.go

// Package mock_account_application_port_out is a generated GoMock package.
package mock_account_application_port_out

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	account_domain "github.com/kjarmicki/go-buckpal/pkg/account/domain"
)

// MockLoadAccountPort is a mock of LoadAccountPort interface.
type MockLoadAccountPort struct {
	ctrl     *gomock.Controller
	recorder *MockLoadAccountPortMockRecorder
}

// MockLoadAccountPortMockRecorder is the mock recorder for MockLoadAccountPort.
type MockLoadAccountPortMockRecorder struct {
	mock *MockLoadAccountPort
}

// NewMockLoadAccountPort creates a new mock instance.
func NewMockLoadAccountPort(ctrl *gomock.Controller) *MockLoadAccountPort {
	mock := &MockLoadAccountPort{ctrl: ctrl}
	mock.recorder = &MockLoadAccountPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadAccountPort) EXPECT() *MockLoadAccountPortMockRecorder {
	return m.recorder
}

// LoadAccount mocks base method.
func (m *MockLoadAccountPort) LoadAccount(ctx context.Context, accountId account_domain.AccountId, baselineDate time.Time) (*account_domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAccount", ctx, accountId, baselineDate)
	ret0, _ := ret[0].(*account_domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAccount indicates an expected call of LoadAccount.
func (mr *MockLoadAccountPortMockRecorder) LoadAccount(ctx, accountId, baselineDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAccount", reflect.TypeOf((*MockLoadAccountPort)(nil).LoadAccount), ctx, accountId, baselineDate)
}
