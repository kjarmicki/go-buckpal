// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/account/application/port/out/account_lock.go

// Package mock_account_application_port_out is a generated GoMock package.
package mock_account_application_port_out

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account_domain "github.com/kjarmicki/go-buckpal/pkg/account/domain"
)

// MockAccountLock is a mock of AccountLock interface.
type MockAccountLock struct {
	ctrl     *gomock.Controller
	recorder *MockAccountLockMockRecorder
}

// MockAccountLockMockRecorder is the mock recorder for MockAccountLock.
type MockAccountLockMockRecorder struct {
	mock *MockAccountLock
}

// NewMockAccountLock creates a new mock instance.
func NewMockAccountLock(ctrl *gomock.Controller) *MockAccountLock {
	mock := &MockAccountLock{ctrl: ctrl}
	mock.recorder = &MockAccountLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountLock) EXPECT() *MockAccountLockMockRecorder {
	return m.recorder
}

// LockAccount mocks base method.
func (m *MockAccountLock) LockAccount(accountId account_domain.AccountId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAccount", accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAccount indicates an expected call of LockAccount.
func (mr *MockAccountLockMockRecorder) LockAccount(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccount", reflect.TypeOf((*MockAccountLock)(nil).LockAccount), accountId)
}

// ReleaseAccount mocks base method.
func (m *MockAccountLock) ReleaseAccount(accountId account_domain.AccountId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseAccount", accountId)
}

// ReleaseAccount indicates an expected call of ReleaseAccount.
func (mr *MockAccountLockMockRecorder) ReleaseAccount(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAccount", reflect.TypeOf((*MockAccountLock)(nil).ReleaseAccount), accountId)
}
